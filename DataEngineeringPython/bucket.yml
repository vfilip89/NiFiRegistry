flows:
  622847f6-53c0-4a24-aefd-d79f3bb1b0de: {ver: 1, file: CSV_Processing_Pipeline.snapshot,
    comments: First Commit., author: anonymous, created: 1738241601220, flowName: CSV
      Processing Pipeline, flowDesc: 'Chapter 3: CSV Processing Pipeline. Reads in
      existing.CSV file you created in Python. It will run a query for people over
      the age of 40, then write out that record to a file.'}
  ce80511b-1197-4c09-9e40-bf4d6913fe48: {ver: 6, file: From_PostgreSQL_to_Elasticsearch.snapshot,
    comments: 'Chapter 10: Using Variable NifI Registry. Using Parameters for URL
      and Index. Not for controllers. It still does not work.', author: anonymous,
    created: 1738596700801, flowName: From PostgreSQL to Elasticsearch, flowDesc: 'Chapter
      4: From PostgreSQL to Elasticsearch. Extract data from PostgreSQL and load it
      to an Elasticsearch index.'}
  33a1fd12-ae20-4d5d-8d3b-0ce3228cfde8: {ver: 1, file: Modular_Pipeline_with_Processor_Groups.snapshot,
    comments: First Commit, author: anonymous, created: 1738590585133, flowName: Modular
      Pipeline with Processor Groups, flowDesc: 'Chapter 10: Successfully connects
      4 processor groups using 3 input ports and a funnel and an output port. Generates
      JSON data from 3 similar modularized sources. Each source with different content.
      Updates filenames from content and writes them the to disk.'}
  6ff807a8-68ab-4ea3-b1fa-48a0f043f9e5: {ver: 2, file: Great_Expectations_in_NiFi.snapshot,
    comments: In the previous version a wrong processor group was saved. In current
      version the correct processor group is saved., author: anonymous, created: 1738240893650,
    flowName: Great Expectations in NiFi, flowDesc: 'Chapter 7: Combining NiFi and
      Great Expectations. Creates 1,000 records and saves it as a CSV file. It then
      using a python script runs the people.validation that is created with Great
      Expectations on the data and reads in the result — the pass or fail JSON from
      the script. Lastly, it extracts the result and routes the flowfile to either
      a pass or fail PutFile processor.'}
  d37e537c-55b3-4841-871e-0d6676248c47: {ver: 3, file: Production_Level_Data_Pipeline.snapshot,
    comments: Parameterized also Slack Webhook URL, author: anonymous, created: 1739021957415,
    flowName: Production Level Data Pipeline, flowDesc: 'Chapter 11: The data pipeline
      you build will do the following: • Read files from the data lake. • Insert the
      files into staging. • Validate the staging data. • Move staging to the warehouse.
      Has variable for deploying purposes to manage TEST AND PROD environments and
      to manage staging and warehouse dbs.'}
  65380792-b863-4d1a-bcc4-70580dfccd20: {ver: 1, file: Studying_Backpressure.snapshot,
    comments: First Commit, author: anonymous, created: 1738586437194, flowName: Studying
      Backpressure, flowDesc: 'Chapter 10: Studying Backpressure with a simple flowfile
      generator and a putfile processor.'}
  4c41c582-2256-4ac3-893c-8c7a96508925:
    ver: 1
    file: JSON_Processing_Pipeline.snapshot
    comments: FIrst Commit
    author: anonymous
    created: 1738241792744
    flowName: JSON Processing Pipeline
    flowDesc: |-
      Chapter 3: JSON Processing Pipeline. Read a file, split it into rows,
      and write each row to a file – but you will perform some more modifications of the data
      within the pipeline so that the rows you write to disk are different than what was in the
      original file.
  b1f52a6e-9f34-423a-8bd5-1931fe49d94b: {ver: 3, file: SCF.snapshot, comments: 'Monitoring
      Update. A PutSlack processor has been added to monitor Elasticsearch upsert
      failure and send to a slack channel direct messages when there was a failure,
      passing data from the flowfile in the message with the NiFi expression language.',
    author: anonymous, created: 1738325440065, flowName: SCF, flowDesc: 'Chapter 6:
      A 311 data pipeline that connects to SeeClickFix and downloads all the issues
      for a city, and then loads it in Elasticsearch.'}
layoutVer: 1
bucketId: ded13710-dd4f-46e3-842f-c8e48f80e2dc
